---
import Date from '~/components/Date.astro'
import { EVENT_TIMESTAMP } from '~/consts/event-date';
import Headline from '~/components/ui/Headline.astro';
const {
  title = '',
  subtitle = '',
  tagline = '',
} = Astro.props;
---

<section class="mt-20 flex flex-col place-items-center gap-y-10 md:mt-60 mb-[8rem]" aria-label="cuenta atrÃ¡s">
    <Headline title={title} subtitle={subtitle} tagline={tagline} />

	<div
		class="grid w-[80vw] select-none grid-cols-3 flex-col items-center justify-center gap-y-20 uppercase text-primary md:gap-x-6 md:gap-y-11"
		data-date={EVENT_TIMESTAMP}
		role="timer"
	>
		<Date
			dateType="DÃ­as"
			attribute={{ "data-days": "" }}
			position="col-span-3"
			className="font-recepts text-6xl text-accent md:text-[20rem]"
			wrapperClassName="my-8 md:my-0 md:-mt-16"
			height={"h-[3.80rem] md:h-[20rem]"}
			max={129}
		/>

		<Date
			wrapperClassName="my-8"
			dateType="Horas"
			attribute={{ "data-hours": "" }}
			className="font-recepts text-6xl text-accent"
			height={"h-[3.80rem]"}
			max={23}
		/>

		<Date
			wrapperClassName="my-8"
			dateType="Minutos"
			attribute={{ "data-minutes": "" }}
			className="font-recepts text-6xl text-accent"
			height={"h-[3.80rem]"}
			max={59}
		/>

		<Date
			wrapperClassName="my-8"
			dateType="Segundos"
			attribute={{ "data-seconds": "" }}
			className="font-recepts text-6xl text-accent"
			height={"h-[3.80rem]"}
			max={59}
		/>
	</div>
</section>

<script>
    import createCountdown from '~/lib/countdown';
    import { $ } from '~/lib/dom-selector';

	function initCountdown() {
		const $countdown = $("[data-date]")
		if (!$countdown) return

		const $days = {
			firstDigit: $("[data-days] [data-first-group]", $countdown),
			secondDigit: $("[data-days] [data-second-group]", $countdown),
			thirdDigit: $("[data-days] [data-third-group]", $countdown),
		}
		const $hours = {
			firstDigit: $("[data-hours] [data-first-group]", $countdown),
			secondDigit: $("[data-hours] [data-second-group]", $countdown),
		}
		const $minutes = {
			firstDigit: $("[data-minutes] [data-first-group]", $countdown),
			secondDigit: $("[data-minutes] [data-second-group]", $countdown),
		}
		const $seconds = {
			firstDigit: $("[data-seconds] [data-first-group]", $countdown),
			secondDigit: $("[data-seconds] [data-second-group]", $countdown),
		}
		const timestamp = Number($countdown?.getAttribute("data-date") ?? 0)
		const countdown = createCountdown(timestamp, {
			onTick({ days, hours, minutes, seconds }) {
				if (
					$days.firstDigit instanceof HTMLElement &&
					$days.secondDigit instanceof HTMLElement &&
					$days.thirdDigit instanceof HTMLElement
				) {
					switch (days.length) {
						case 3:
							animateDigit($days.firstDigit, days[0], "day")
							animateDigit($days.secondDigit, days[1], "day")
							animateDigit($days.thirdDigit, days[2], "day")
							break
						case 2:
							$days.firstDigit.parentNode?.removeChild($days.firstDigit)
							animateDigit($days.secondDigit, days[0], "day")
							animateDigit($days.thirdDigit, days[1], "day")
							break
						default:
							$days.secondDigit.parentNode?.removeChild($days.secondDigit)
							animateDigit($days.thirdDigit, days[0], "day")
					}
				}

				if ($hours.firstDigit instanceof HTMLElement && $hours.secondDigit instanceof HTMLElement) {
					animateDigit($hours.firstDigit, hours[0], "hour")
					animateDigit($hours.secondDigit, hours[1], "hour")
				}

				if (
					$minutes.firstDigit instanceof HTMLElement &&
					$minutes.secondDigit instanceof HTMLElement
				) {
					animateDigit($minutes.firstDigit, minutes[0], "minute")
					animateDigit($minutes.secondDigit, minutes[1], "minute")
				}

				if (
					$seconds.firstDigit instanceof HTMLElement &&
					$seconds.secondDigit instanceof HTMLElement
				) {
					animateDigit($seconds.firstDigit, seconds[0], "second")
					animateDigit($seconds.secondDigit, seconds[1], "second")
				}
			},

			onComplete() {
				$(".countdown-text")?.remove()

				if (!$countdown) return

				$countdown.innerHTML = "Â¡El evento de presentaciÃ³n ha empezado! ðŸŽ‰"
				$countdown.className =
					"text-primary uppercase font-semibold animate-fade-in text-3xl text-center"
			},
		})

		return countdown
	}

	function animateDigit(group: HTMLElement, value: string, type: string) {
		const wrapper = $("[data-wrapper]", group)
		const num = $(`[data-num="${value}"]`, group)
		const xnum = $("[data-num-x0]", group) // 0 aÃ±adido para la animaciÃ³n

		if (
			wrapper instanceof HTMLElement &&
			num instanceof HTMLElement &&
			xnum instanceof HTMLElement
		) {
			wrapper.style.transform = `translateY(-${num.offsetTop}px)`

			// Cuando cambie, volver arriba
			if (value === "0") {
				setTimeout(() => {
					wrapper.classList.toggle("duration-[800ms]", false)
					wrapper.classList.toggle("transition-transform", false)
					wrapper.style.transform = `translateY(-${xnum.offsetTop}px)`
				}, 800)
			} else {
				wrapper.classList.toggle("duration-[800ms]", true)
				wrapper.classList.toggle("transition-transform", true)
			}
		}
	}

	document.addEventListener("astro:page-load", () => {
		const countdown = initCountdown()
		countdown && countdown.start()
	})
</script>
